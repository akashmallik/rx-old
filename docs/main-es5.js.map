{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/home/home.component.html","webpack:///./src/app/medicine-dialog/medicine-dialog.component.html","webpack:///./src/app/medicine/medicine.component.html","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/patient/patient.component.html","webpack:///./src/app/single-patient/single-patient.component.html","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/home/home.component.scss","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/medicine-dialog/medicine-dialog.component.scss","webpack:///./src/app/medicine-dialog/medicine-dialog.component.ts","webpack:///./src/app/medicine/medicine.component.scss","webpack:///./src/app/medicine/medicine.component.ts","webpack:///./src/app/navbar/navbar.component.scss","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/patient/patient.component.scss","webpack:///./src/app/patient/patient.component.ts","webpack:///./src/app/services/advice.service.ts","webpack:///./src/app/services/encounter.service.ts","webpack:///./src/app/services/examination.service.ts","webpack:///./src/app/services/medicine.service.ts","webpack:///./src/app/services/patient.service.ts","webpack:///./src/app/services/symptom.service.ts","webpack:///./src/app/single-patient/single-patient.component.scss","webpack:///./src/app/single-patient/single-patient.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<app-navbar></app-navbar>\\r\\n\\r\\n\\r\\n<router-outlet></router-outlet>\\r\\n\\r\\n<footer>\\r\\n    <div class=\\\"text-center copyright\\\">Designed & Developed By: <strong>Team R<sub>x</sub></strong></div>\\r\\n</footer>\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <a mat-raised-button color=\\\"primary\\\" routerLink=\\\"/patients\\\">Add Patient</a>\\r\\n\\r\\n    <mat-form-field>\\r\\n        <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n    </mat-form-field>\\r\\n    <div class=\\\"mat-elevation-z8\\\">\\r\\n        <table mat-table matSort [dataSource]=\\\"dataSource\\\">\\r\\n    \\r\\n            <!-- Name Column -->\\r\\n            <ng-container matColumnDef=\\\"name\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Name. </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n            </ng-container>\\r\\n    \\r\\n            <!-- Age Column -->\\r\\n            <ng-container matColumnDef=\\\"age\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Age </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.age}} </td>\\r\\n            </ng-container>\\r\\n    \\r\\n            <!-- Phone Column -->\\r\\n            <ng-container matColumnDef=\\\"phone\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Phone </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.phone}} </td>\\r\\n            </ng-container>\\r\\n    \\r\\n            <!-- Address Column -->\\r\\n            <ng-container matColumnDef=\\\"address\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.address}} </td>\\r\\n            </ng-container>\\r\\n    \\r\\n            <!-- Action Column -->\\r\\n            <ng-container matColumnDef=\\\"action\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Action </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n                    <a mat-raised-button color=\\\"primary\\\" class=\\\"mr-2\\\" routerLink=\\\"patients/{{element.id}}\\\">\\r\\n                        <i class=\\\"material-icons\\\">visibility</i>\\r\\n                    </a>\\r\\n                    <a mat-raised-button color=\\\"accent\\\" class=\\\"mr-2\\\" routerLink=\\\"patients/edit/{{element.id}}\\\">\\r\\n                        <i class=\\\"material-icons\\\">edit</i>\\r\\n                    </a>\\r\\n                    <button mat-raised-button color=\\\"warn\\\" (click)=\\\"delete(element)\\\">\\r\\n                        <i class=\\\"material-icons\\\">delete</i>\\r\\n                    </button>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n    \\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n        </table>\\r\\n        <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"<h2 mat-dialog-title>{{ data.length !== undefined ? 'Add' : 'Update'}} Medicine</h2>\\r\\n<mat-dialog-content>\\r\\n    <form #medicineForm=\\\"ngForm\\\" class=\\\"mat-form\\\">\\r\\n        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n            <input matInput [(ngModel)]=\\\"data.medicine\\\" #medicine=\\\"ngModel\\\" name=\\\"medicine\\\" placeholder=\\\"Medicine\\\" required>\\r\\n            <mat-error *ngIf=\\\"medicine.touched && medicine.invalid\\\">The <strong>medicine</strong> field is required.</mat-error>\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"mat-form-field\\\" hidden=\\\"true\\\">\\r\\n            <input matInput [(ngModel)]=\\\"data.id\\\" name=\\\"id\\\" placeholder=\\\"id\\\">\\r\\n        </mat-form-field>\\r\\n    </form>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button mat-raised-button color=\\\"warn\\\" mat--dialogclose (click)=\\\"cancel()\\\">Cancel</button>\\r\\n  <button mat-raised-button color=\\\"primary\\\" [mat-dialog-close]=\\\"true\\\" [disabled]=\\\"medicineForm.invalid\\\" (click)=\\\"save(medicineForm.value)\\\">{{ data.length === 0 ? 'Add' : 'Update'}}</button>\\r\\n</mat-dialog-actions>\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"openDialog()\\\">Add Medicine</button>\\r\\n    <mat-form-field>\\r\\n        <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n    </mat-form-field>\\r\\n    <div class=\\\"mat-elevation-z8\\\">\\r\\n        <table mat-table matSort [dataSource]=\\\"dataSource\\\">\\r\\n    \\r\\n            <!-- Name Column -->\\r\\n            <ng-container matColumnDef=\\\"medicine\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Medicine </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{ element.medicine }} </td>\\r\\n            </ng-container>\\r\\n    \\r\\n            <!-- Action Column -->\\r\\n            <ng-container matColumnDef=\\\"action\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Action </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n                    <button mat-raised-button color=\\\"accent\\\" class=\\\"mr-2\\\" (click)=\\\"openDialog(element)\\\">\\r\\n                        <i class=\\\"material-icons\\\">edit</i>\\r\\n                    </button>\\r\\n                    <button mat-raised-button color=\\\"warn\\\" (click)=\\\"delete(element)\\\">\\r\\n                        <i class=\\\"material-icons\\\">delete</i>\\r\\n                    </button>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n    \\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n        </table>\\r\\n        <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"<header id=\\\"navbar\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <nav>\\r\\n            <a routerLink=\\\"/\\\" class=\\\"logo\\\">R<sub>x <span class=\\\"xm\\\">alpha-1.0</span></sub></a>\\r\\n            <a mat-raised-button routerLink=\\\"/\\\" class=\\\"mr-2\\\">Home</a>\\r\\n            <!-- <a mat-raised-button routerLink=\\\"patients\\\" class=\\\"mr-2\\\">Patients</a> -->\\r\\n            <a mat-raised-button routerLink=\\\"medicine\\\" class=\\\"mr-2\\\">Medicine</a>\\r\\n            \\r\\n            <!-- <button mat-raised-button [matMenuTriggerFor]=\\\"belowMenu\\\">Dropdown</button>\\r\\n            <mat-menu #belowMenu=\\\"matMenu\\\" yPosition=\\\"below\\\">\\r\\n              <button mat-menu-item>Item 1</button>\\r\\n              <button mat-menu-item>Item 2</button>\\r\\n            </mat-menu> -->\\r\\n        </nav>\\r\\n    </div>\\r\\n</header>\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8\\\">\\r\\n            <form #patientForm=\\\"ngForm\\\" (ngSubmit)=\\\"save(patientForm.value)\\\" class=\\\"mat-form\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-md-8\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"patient.name\\\" #name=\\\"ngModel\\\" name=\\\"name\\\" placeholder=\\\"Patient Name\\\" required>\\r\\n                            <mat-error *ngIf=\\\"name.touched && name.invalid\\\">The <strong>name</strong> field is required.</mat-error>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-md-4\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput type=\\\"number\\\" [(ngModel)]=\\\"patient.age\\\" #age=\\\"ngModel\\\" name=\\\"age\\\" placeholder=\\\"Age\\\" required>\\r\\n                            <mat-error *ngIf=\\\"age.touched && age.invalid\\\">The <strong>age</strong> field is required.</mat-error>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-md-4\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <mat-label>Sex</mat-label>\\r\\n                            <mat-select [(ngModel)]=\\\"patient.sex\\\" name=\\\"sex\\\">\\r\\n                                <!-- <mat-option *ngFor=\\\"let s of sex | keyvalue\\\" [value]=\\\"s.key\\\"> -->\\r\\n                                <mat-option *ngFor=\\\"let s of sex\\\" [value]=\\\"s.key\\\">\\r\\n                                {{ s.value }}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-md-4\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <mat-label>Blood Group</mat-label>\\r\\n                            <mat-select [(ngModel)]=\\\"patient.blood_group\\\" name=\\\"blood_group\\\">\\r\\n                                <mat-option *ngFor=\\\"let b of blood\\\" [value]=\\\"b.key\\\">\\r\\n                                {{ b.value }}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-md-4\\\">\\r\\n                        <div class=\\\"mat-form-field\\\">\\r\\n                            <input type=\\\"file\\\" ngModel name=\\\"avatar\\\" (change)=\\\"onFileSelected($event)\\\" placeholder=\\\"Avatar\\\">\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-md-6\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"patient.phone\\\" #phone=\\\"ngModel\\\" phone=\\\"CN\\\" name=\\\"phone\\\" placeholder=\\\"Phone\\\" required>\\r\\n                            <mat-error *ngIf=\\\"phone.touched && phone.invalid\\\">The <strong>phone</strong> field is required.</mat-error>\\r\\n                            <mat-error *ngIf=\\\"phone.errors?.phone\\\">error message</mat-error>\\r\\n\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-md-6\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"patient.email\\\" #email=\\\"ngModel\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" email>\\r\\n                            <mat-error *ngIf=\\\"email.errors?.email\\\">Please enter a valid email.</mat-error>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                    <textarea matInput [(ngModel)]=\\\"patient.address\\\" name=\\\"address\\\" placeholder=\\\"Address\\\"></textarea>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <button mat-raised-button [disabled]=\\\"patientForm.invalid\\\" color=\\\"primary\\\">Submit</button>\\r\\n            </form>\\r\\n    \\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n            <mat-card class=\\\"example-card\\\" *ngIf=\\\"patient.length === undefined\\\">\\r\\n                <mat-card-header>\\r\\n                    <div mat-card-avatar [ngStyle]=\\\"{ 'background-image': 'url(' + patient.avatar + ')', 'background-size': 'cover'}\\\"></div>\\r\\n                    <mat-card-title>{{ patient.name }}</mat-card-title>\\r\\n                    <mat-card-subtitle><strong>Sex:</strong> {{ patient.sex }} <strong>Age:</strong> {{ patient.age }}</mat-card-subtitle>\\r\\n                </mat-card-header>\\r\\n                <img mat-card-image [src]=\\\"patient.avatar\\\" alt=\\\"{{ patient.name }}\\\">\\r\\n                <mat-card-content>\\r\\n                    <strong>Blood Group:</strong> {{ patient.blood_group }} <br>\\r\\n                    <strong>Phone:</strong> {{ patient.phone }} <br>\\r\\n                    <strong>Email:</strong> {{ patient.email }} <br>\\r\\n                    <strong>Address:</strong> {{ patient.address }}\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n    \\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-3\\\">\\r\\n            <mat-card class=\\\"example-card\\\">\\r\\n                <mat-card-header>\\r\\n                    <div mat-card-avatar [ngStyle]=\\\"{ 'background-image': 'url(' + patient.avatar + ')', 'background-size': 'cover'}\\\"></div>\\r\\n                    <mat-card-title>{{ patient.name }}</mat-card-title>\\r\\n                    <mat-card-subtitle><strong>Sex:</strong> {{ patient.sex }} <strong>Age:</strong> {{ patient.age }}</mat-card-subtitle>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <strong>Blood Group:</strong> {{ patient.blood_group }} <br>\\r\\n                    <strong>Phone:</strong> {{ patient.phone }} <br>\\r\\n                    <strong>Email:</strong> {{ patient.email }} <br>\\r\\n                    <strong>Address:</strong> {{ patient.address }}\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            <mat-card class=\\\"mt-3\\\">\\r\\n                Encounters\\r\\n                <mat-card-content>\\r\\n                    <mat-list>\\r\\n                        <a mat-button *ngFor=\\\"let e of encounters; index as i\\\"\\r\\n                        routerLink=\\\"/patients/{{id}}/\\\"\\r\\n                        [queryParams]=\\\"{ encounter: e.id }\\\"\\r\\n                        [class.active]=\\\"encounterId == e.id\\\">\\r\\n                            <strong>Encounter-{{ i+1 }}</strong> [{{ e.date }}]\\r\\n                        </a>\\r\\n                    </mat-list>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            <div class=\\\"mat-elevation-z8\\\">\\r\\n            </div>\\r\\n\\r\\n            <form #encounterForm=\\\"ngForm\\\" (ngSubmit)=\\\"encounter(encounterForm.value)\\\" class=\\\"mat-form\\\">\\r\\n                <mat-form-field class=\\\"mat-form-field\\\" hidden=\\\"true\\\">\\r\\n                    <input matInput [matDatepicker]=\\\"picker\\\" ngModel name=\\\"date\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                    <mat-label>Visit Type</mat-label>\\r\\n                    <mat-select ngModel name=\\\"visit_type\\\">\\r\\n                        <mat-option *ngFor=\\\"let v of visit\\\" [value]=\\\"v.key\\\">\\r\\n                        {{ v.value }}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <button mat-raised-button color=\\\"primary\\\">Submit</button>\\r\\n            </form>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-9\\\">\\r\\n            <mat-tab-group>\\r\\n                <mat-tab label=\\\"C/C\\\">\\r\\n                    <mat-list>\\r\\n                        <mat-list-item *ngFor=\\\"let s of symptoms\\\">\\r\\n                            <h4 matLine>{{ s.symptom }}</h4> \\r\\n                            <button mat-icon-button color=\\\"primary\\\" (click)=\\\"sigleSymptom(s)\\\">\\r\\n                                <i class=\\\"material-icons\\\">edit</i>\\r\\n                            </button>\\r\\n                            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteSymptom(s)\\\">\\r\\n                                <i class=\\\"material-icons\\\">delete</i>\\r\\n                            </button>\\r\\n                        </mat-list-item>\\r\\n                    </mat-list>\\r\\n                    <form #symptomForm=\\\"ngForm\\\" (ngSubmit)=\\\"symptom(symptomForm.value); symptomForm.reset()\\\" class=\\\"mat-form\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\" hidden>\\r\\n                            <textarea matInput [(ngModel)]=\\\"symp.id\\\" name=\\\"id\\\" placeholder=\\\"Id\\\"></textarea>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\" hidden>\\r\\n                            <textarea matInput [(ngModel)]=\\\"symp.patient\\\" name=\\\"patient\\\" placeholder=\\\"Patient\\\"></textarea>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <textarea matInput [(ngModel)]=\\\"symp.symptom\\\" #sym=\\\"ngModel\\\" name=\\\"symptom\\\" placeholder=\\\"Symptom\\\" required></textarea>\\r\\n                            <mat-error *ngIf=\\\"sym.touched && sym.invalid\\\">The <strong>symptom</strong> field is required.</mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <button mat-raised-button type=\\\"button\\\" color=\\\"warn\\\" (click)=\\\"symptomForm.reset(); symp = []\\\" class=\\\"mr-2\\\">Reset</button>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"symptomForm.invalid\\\">{{ symp.length !== undefined ? 'Add' : 'Update' }}</button>\\r\\n                    </form>\\r\\n                    \\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"Examination\\\">\\r\\n                    <form #reportForm=\\\"ngForm\\\" (ngSubmit)=\\\"report(reportForm.value); reportForm.reset()\\\" class=\\\"mat-form\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\" hidden>\\r\\n                            <input matInput [(ngModel)]=\\\"examination.id\\\" name=\\\"id\\\" placeholder=\\\"id\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.pulse\\\" name=\\\"pulse\\\" placeholder=\\\"pulse\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.bp\\\" name=\\\"bp\\\" placeholder=\\\"bp\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.temp\\\" name=\\\"temp\\\" placeholder=\\\"temp\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.resp_rate\\\" name=\\\"resp_rate\\\" placeholder=\\\"resp_rate\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.height\\\" name=\\\"height\\\" placeholder=\\\"height\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.lifestyle\\\" name=\\\"lifestyle\\\" placeholder=\\\"lifestyle\\\">\\r\\n                        </mat-form-field>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"reportForm.invalid\\\">{{ examination.id ? 'Update' : 'Add' }}</button>\\r\\n                    </form>\\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"Medicine\\\">\\r\\n                    <div *ngIf=\\\"encount.length === undefined\\\">\\r\\n                        <div *ngFor=\\\"let n of encount.medicines\\\">\\r\\n                            <div *ngFor=\\\"let m of medicines\\\">\\r\\n                                <div *ngIf=\\\"n === m.id\\\" class=\\\"mb-3\\\">{{ m.medicine }}</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <form #medicineForm=\\\"ngForm\\\" (ngSubmit)=\\\"medicine(medicineForm.value)\\\" class=\\\"mat-form\\\">\\r\\n                            <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                                <mat-label>Medicine</mat-label>\\r\\n                                <mat-select [(ngModel)]=\\\"encount.medicines\\\" name=\\\"medicines\\\" multiple>\\r\\n                                  <mat-option *ngFor=\\\"let m of medicines\\\" [value]=\\\"m.id\\\" selected>{{m.medicine}}</mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                            <button mat-raised-button color=\\\"primary\\\">Add</button>\\r\\n                        </form>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"encount.length !== undefined\\\">\\r\\n                        Please select encounter first! \\r\\n                    </div>\\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"Advice\\\">\\r\\n                    <mat-list>\\r\\n                        <mat-list-item *ngFor=\\\"let a of advices\\\">\\r\\n                            <h4 matLine>{{ a.advice }}</h4>\\r\\n                            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"singleAdvice(a)\\\">\\r\\n                                <i class=\\\"material-icons\\\">edit</i>\\r\\n                            </button> \\r\\n                            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteAdvice(a)\\\">\\r\\n                                <i class=\\\"material-icons\\\">delete</i>\\r\\n                            </button>\\r\\n                        </mat-list-item>\\r\\n                    </mat-list>\\r\\n                    <form #adviceForm=\\\"ngForm\\\" (ngSubmit)=\\\"advice(adviceForm.value); adviceForm.reset()\\\" class=\\\"mat-form\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\" hidden>\\r\\n                            <textarea matInput [(ngModel)]=\\\"advic.id\\\" name=\\\"id\\\" placeholder=\\\"Id\\\"></textarea>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <textarea matInput [(ngModel)]=\\\"advic.advice\\\" #adv=\\\"ngModel\\\" name=\\\"advice\\\" placeholder=\\\"Advice\\\" required></textarea>\\r\\n                            <mat-error *ngIf=\\\"adv.touched && adv.invalid\\\">The <strong>advice</strong> field is required.</mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <button mat-raised-button type=\\\"button\\\" color=\\\"warn\\\" (click)=\\\"adviceForm.reset(); advic = []\\\" class=\\\"mr-2\\\">Reset</button>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"adviceForm.invalid\\\">{{ advic.length !== undefined ? 'Add' : 'Update' }}</button>\\r\\n                    </form>\\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"Prescription\\\">\\r\\n                    <mat-card class=\\\"example-card\\\">\\r\\n                        <mat-card-content>\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col-md-6\\\">\\r\\n                                    <h3>Dr: Akash Mallik</h3>\\r\\n                                    <strong>MBBS</strong> <br>\\r\\n                                    Stength: General Surgery <br>\\r\\n                                    Reg. No. -55065\\r\\n                                </div>\\r\\n                                <div class=\\\"col-md-6 text-right\\\">\\r\\n                                    Dhaka Medical Institute\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <hr>\\r\\n                            <div class=\\\"\\\">\\r\\n                                <h3 class=\\\"text-center\\\">Patient: <strong>{{ patient.name }}</strong></h3>\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-9\\\">\\r\\n                                        <strong>Sex:</strong> {{ patient.sex }} <strong>Age:</strong> {{ patient.age }} <strong>Blood Group:</strong> {{ patient.blood_group }} <br>\\r\\n                                        <strong>Phone:</strong> {{ patient.phone }} <strong>Email:</strong> {{ patient.email }} <strong>Address:</strong> {{ patient.address }}\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-3\\\">\\r\\n                                        <strong>Encounter Id: </strong> {{ encount.id }} <br>\\r\\n                                        <strong>Date: </strong> {{ encount.date }}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <hr>\\r\\n                            <hr>\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col-md-4\\\">\\r\\n                                    <h4>Symptoms</h4> <hr>\\r\\n                                    <ul>\\r\\n                                        <li *ngFor=\\\"let s of symptoms\\\">\\r\\n                                            {{ s.symptom }}\\r\\n                                        </li>\\r\\n                                    </ul>\\r\\n                                    <h4>General Info</h4> <hr>\\r\\n                                    <ul>\\r\\n                                        <li>pulse: {{ examination.pulse }}</li>\\r\\n                                        <li>bp: {{ examination.bp }}</li>\\r\\n                                        <li>temp: {{ examination.temp }}</li>\\r\\n                                        <li>resp_rate: {{ examination.resp_rate }}</li>\\r\\n                                        <li>height: {{ examination.height }}</li>\\r\\n                                        <li>lifestyle: {{ examination.lifestyle }}</li>\\r\\n                                    </ul>\\r\\n                                    <h4>Advices</h4> <hr>\\r\\n                                    <ul>\\r\\n                                        <li *ngFor=\\\"let a of advices\\\">\\r\\n                                            {{ a.advice }}\\r\\n                                        </li>\\r\\n                                    </ul>\\r\\n\\r\\n                                </div>\\r\\n                                <div class=\\\"col-md-8\\\">\\r\\n                                    <h4>Medicines</h4> <hr>\\r\\n                                    <ul *ngFor=\\\"let n of encount.medicines\\\">\\r\\n                                        <div *ngFor=\\\"let m of medicines\\\">\\r\\n                                            <li *ngIf=\\\"n === m.id\\\">{{ m.medicine }}</li>\\r\\n                                        </div>\\r\\n                                    </ul>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </mat-card-content>\\r\\n                        <mat-card-footer>\\r\\n                            <div class=\\\"text-center copyright\\\">Designed & Developed By: <strong>Team R<sub>x</sub></strong></div>\\r\\n                        </mat-card-footer>\\r\\n                    </mat-card>\\r\\n                    \\r\\n                    <button mat-raised-button color=\\\"primary\\\" class=\\\"mt-3 float-right\\\">Print</button>\\r\\n                </mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { PatientComponent } from './patient/patient.component';\r\nimport { SinglePatientComponent } from './single-patient/single-patient.component';\r\nimport { MedicineComponent } from './medicine/medicine.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: HomeComponent },\r\n  { path: 'patients/edit/:id', component: PatientComponent },\r\n  { path: 'patients/:id', component: SinglePatientComponent },\r\n  { path: 'patients', component: PatientComponent },\r\n  { path: 'medicine', component: MedicineComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'rx';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatDialogModule, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\r\n\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { PatientComponent } from './patient/patient.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SinglePatientComponent } from './single-patient/single-patient.component';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MedicineComponent } from './medicine/medicine.component';\r\nimport { MedicineDialogComponent } from './medicine-dialog/medicine-dialog.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PatientComponent,\r\n    HomeComponent,\r\n    NavbarComponent,\r\n    SinglePatientComponent,\r\n    MedicineComponent,\r\n    MedicineDialogComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatMenuModule,\r\n    MatAutocompleteModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    HttpClientModule,\r\n    ToastrModule.forRoot(),\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatTabsModule,\r\n    MatCardModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatDialogModule\r\n  ],\r\n  providers: [\r\n    // { provide: MatDialogRef, useValue: {} },\r\n    // { provide: MAT_DIALOG_DATA, useValue: [] },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [MedicineDialogComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWUvaG9tZS5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nexport interface Patient {\r\n  id: number;\r\n  name: string;\r\n  phone: number;\r\n  email: string;\r\n  address: string;\r\n  sex: string;\r\n  age: number;\r\n  blood_group: string;\r\n  avatar: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  displayedColumns: string[] = ['name', 'age', 'phone', 'address', 'action'];\r\n  dataSource: MatTableDataSource<Patient>;\r\n\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private toastr: ToastrService) {}\r\n\r\n  ngOnInit() {\r\n    this.patientService.getAll()\r\n    .subscribe(\r\n      (response: Patient[]) => {\r\n        this.dataSource = new MatTableDataSource<Patient>(response);\r\n        this.dataSource.sort = this.sort;\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource._updateChangeSubscription();\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  delete(item) {\r\n    const index = this.dataSource.data.indexOf(item);\r\n    this.patientService.delete(item.id)\r\n    .subscribe(\r\n      data => {\r\n        this.dataSource.data.splice(index, 1);\r\n        this.dataSource._updateChangeSubscription();\r\n        this.toastr.success('Successfully Deleted', 'Success');\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lZGljaW5lLWRpYWxvZy9tZWRpY2luZS1kaWFsb2cuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-medicine-dialog',\r\n  templateUrl: './medicine-dialog.component.html',\r\n  styleUrls: ['./medicine-dialog.component.scss']\r\n})\r\nexport class MedicineDialogComponent implements OnInit {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<MedicineDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  cancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  save(value) {\r\n    this.dialogRef.close(value);\r\n  }\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lZGljaW5lL21lZGljaW5lLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MedicineService } from '../services/medicine.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { MatDialog, MatDialogConfig, MatTableDataSource, MatSort, MatPaginator } from '@angular/material';\r\nimport { MedicineDialogComponent } from '../medicine-dialog/medicine-dialog.component';\r\n\r\nexport interface Medicine {\r\n  id: number;\r\n  medicine: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-medicine',\r\n  templateUrl: './medicine.component.html',\r\n  styleUrls: ['./medicine.component.scss']\r\n})\r\n\r\nexport class MedicineComponent implements OnInit {\r\n  private errors: any[] = [];\r\n\r\n  displayedColumns: string[] = ['medicine', 'action'];\r\n  dataSource: MatTableDataSource<Medicine>;\r\n\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  constructor(\r\n    private medicineService: MedicineService,\r\n    public dialog: MatDialog,\r\n    private toastr: ToastrService) { }\r\n\r\n  ngOnInit() {\r\n    this.medicineService.getAll()\r\n    .subscribe(\r\n      (data: Medicine[]) => {\r\n        this.dataSource = new MatTableDataSource<Medicine>(data);\r\n        this.dataSource.sort = this.sort;\r\n        this.dataSource.paginator = this.paginator;\r\n      },\r\n      error => {\r\n        this.errorHandler(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  public errorHandler(response) {\r\n    console.log(response);\r\n    if (Array.isArray(response.error)) {\r\n      this.errors = response.error;\r\n      for (const error in this.errors) {\r\n        if (this.errors.hasOwnProperty(error)) {\r\n          this.toastr.warning(error.toUpperCase() + ': ' + this.errors[error], 'Warning');\r\n        }\r\n      }\r\n    } else {\r\n      if (response.status === 404) {\r\n        this.toastr.warning('Not Found!', '404');\r\n      } else {\r\n        this.toastr.error(response.message, 'Error');\r\n      }\r\n    }\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  openDialog(elementdata?: any) {\r\n    const dialogConfig = new MatDialogConfig();\r\n\r\n    dialogConfig.disableClose = true;\r\n    dialogConfig.autoFocus = true;\r\n\r\n    if (elementdata) {\r\n      dialogConfig.data = elementdata;\r\n    } else {\r\n      dialogConfig.data = [];\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(MedicineDialogComponent, dialogConfig);\r\n\r\n    dialogRef.afterClosed().subscribe(\r\n      data => {\r\n        if (data) {\r\n          if (data.id) {\r\n            this.medicineService.update(data.id, data)\r\n            .subscribe(\r\n              response => {\r\n                this.dataSource._updateChangeSubscription();\r\n                this.toastr.success('Successfully Updated', 'Success');\r\n              },\r\n              error => {\r\n                this.errorHandler(error);\r\n              }\r\n            );\r\n          } else {\r\n            this.medicineService.create(data)\r\n            .subscribe(\r\n              (response: Medicine) => {\r\n                this.dataSource.data.splice(this.dataSource.data.length, 0, response);\r\n                this.dataSource._updateChangeSubscription();\r\n                this.toastr.success('Successfully Added', 'Success');\r\n              },\r\n              error => {\r\n                this.errorHandler(error);\r\n              }\r\n            );\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  delete(item) {\r\n    const index = this.dataSource.data.indexOf(item);\r\n    this.medicineService.delete(item.id)\r\n    .subscribe(\r\n      data => {\r\n        this.dataSource.data.splice(index, 1);\r\n        this.dataSource._updateChangeSubscription();\r\n        this.toastr.success('Successfully Deleted', 'Success');\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        this.errorHandler(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","module.exports = \"#navbar {\\n  background: #3f51b5;\\n  padding: 1rem 0;\\n  margin-bottom: 3rem;\\n}\\n#navbar nav {\\n  display: flex !important;\\n}\\n.logo {\\n  color: #ffffff;\\n  text-decoration: none;\\n  font-size: 2rem;\\n  font-weight: bold;\\n  font-family: \\\"Iceland\\\", cursive;\\n  margin-right: auto;\\n}\\n.xm {\\n  font-size: 0.8rem;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbmF2YmFyL0Y6XFwwMy4gRG9uZVxccnhcXHJ4L3NyY1xcYXBwXFxuYXZiYXJcXG5hdmJhci5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvbmF2YmFyL25hdmJhci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLG1CQUFBO0FDQ0o7QURBSTtFQUNJLHdCQUFBO0FDRVI7QURDQTtFQUNJLGNBQUE7RUFDQSxxQkFBQTtFQUNBLGVBQUE7RUFDQSxpQkFBQTtFQUNBLCtCQUFBO0VBQ0Esa0JBQUE7QUNFSjtBRENBO0VBQ0ksaUJBQUE7QUNFSiIsImZpbGUiOiJzcmMvYXBwL25hdmJhci9uYXZiYXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIjbmF2YmFyIHtcclxuICAgIGJhY2tncm91bmQ6ICMzZjUxYjU7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDA7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAzcmVtO1xyXG4gICAgbmF2IHtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbn1cclxuLmxvZ28ge1xyXG4gICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtZmFtaWx5OiAnSWNlbGFuZCcsIGN1cnNpdmU7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcbn1cclxuXHJcbi54bSB7XHJcbiAgICBmb250LXNpemU6IC44cmVtO1xyXG59IiwiI25hdmJhciB7XG4gIGJhY2tncm91bmQ6ICMzZjUxYjU7XG4gIHBhZGRpbmc6IDFyZW0gMDtcbiAgbWFyZ2luLWJvdHRvbTogM3JlbTtcbn1cbiNuYXZiYXIgbmF2IHtcbiAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xufVxuXG4ubG9nbyB7XG4gIGNvbG9yOiAjZmZmZmZmO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGZvbnQtc2l6ZTogMnJlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtZmFtaWx5OiBcIkljZWxhbmRcIiwgY3Vyc2l2ZTtcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xufVxuXG4ueG0ge1xuICBmb250LXNpemU6IDAuOHJlbTtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.scss']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhdGllbnQvcGF0aWVudC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nexport interface Patient {\r\n  id: number;\r\n  name: string;\r\n  phone: number;\r\n  email: string;\r\n  address: string;\r\n  sex: string;\r\n  age: number;\r\n  blood_group: string;\r\n  avatar: string;\r\n}\r\nexport interface Sex {\r\n  key: string;\r\n  value: string;\r\n}\r\nexport interface Blood {\r\n  key: string;\r\n  value: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-patient',\r\n  templateUrl: './patient.component.html',\r\n  styleUrls: ['./patient.component.scss']\r\n})\r\nexport class PatientComponent implements OnInit {\r\n  private selectedFile = null;\r\n  patient = [];\r\n  id: any;\r\n\r\n  sex: Sex[] = [\r\n    { key: 'Male', value: 'Male'},\r\n    { key: 'Female', value: 'Female'},\r\n    { key: 'Others', value: 'Others'},\r\n  ];\r\n  blood: Blood[] = [\r\n    { key: 'A+', value: 'A+'},\r\n    { key: 'A-', value: 'A-'},\r\n    { key: 'B+', value: 'B+'},\r\n    { key: 'B-', value: 'B-'},\r\n    { key: 'AB+', value: 'AB+'},\r\n    { key: 'AB-', value: 'AB-'},\r\n    { key: 'O+', value: 'O+'},\r\n    { key: 'O-', value: 'O-'},\r\n  ];\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private router: Router,\r\n    private toastr: ToastrService,\r\n    private route: ActivatedRoute ) {\r\n      this.id = +this.route.snapshot.paramMap.get('id');\r\n      if (this.id) {\r\n        this.patientService.get(this.id)\r\n        .subscribe(\r\n          (data: Patient[]) => {\r\n            this.patient = data;\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onFileSelected(event) {\r\n    this.selectedFile = event.target.files[0];\r\n  }\r\n\r\n  save(value) {\r\n    const formData: FormData = new FormData();\r\n    formData.append('name', value.name);\r\n    formData.append('age', value.age);\r\n    formData.append('sex', value.sex);\r\n    formData.append('blood_group', value.blood_group);\r\n    formData.append('phone', value.phone);\r\n    formData.append('email', value.email);\r\n    formData.append('address', value.address);\r\n    if (this.selectedFile) {\r\n      formData.append('avatar', this.selectedFile, this.selectedFile.name);\r\n    }\r\n\r\n    if (this.id) {\r\n      this.patientService.update(this.id, formData)\r\n      .subscribe(\r\n        response => {\r\n          this.toastr.success('Successfully Updated', 'Success');\r\n        },\r\n        error => {\r\n          console.log(error.error);\r\n        }\r\n      );\r\n    } else {\r\n      this.patientService.create(formData)\r\n      .subscribe(\r\n        response => {\r\n          this.toastr.success('Successfully Added', 'Success');\r\n        },\r\n        error => {\r\n          console.log(error.error);\r\n        }\r\n      );\r\n    }\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdviceService {\r\n  private configUrl = environment + '/advice/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EncounterService {\r\n  private configUrl = environment + '/encounter/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.patch(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationService {\r\n  private configUrl = environment + '/examination/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicineService {\r\n\r\n  private configUrl = environment + '/medicine/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientService {\r\n  private configUrl = environment + '/patients/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SymptomService {\r\n  private configUrl = environment.API_URL + '/symptom/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NpbmdsZS1wYXRpZW50L3NpbmdsZS1wYXRpZW50LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AdviceService } from '../services/advice.service';\r\nimport { EncounterService } from '../services/encounter.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { MedicineService } from '../services/medicine.service';\r\nimport { ExaminationService } from '../services/examination.service';\r\nimport { SymptomService } from '../services/symptom.service';\r\n\r\nexport interface Patient {\r\n  id: number;\r\n  name: string;\r\n  phone: number;\r\n  email: string;\r\n  address: string;\r\n  sex: string;\r\n  age: number;\r\n  blood_group: string;\r\n  avatar: string;\r\n}\r\nexport interface Patient {\r\n  id: number;\r\n  name: string;\r\n  phone: number;\r\n  email: string;\r\n  address: string;\r\n  sex: string;\r\n  age: number;\r\n  blood_group: string;\r\n  avatar: string;\r\n}\r\nexport interface Examination {\r\n  id: string;\r\n  pulse: number;\r\n  bp: string;\r\n  temp: number;\r\n  resp_rate: number;\r\n  height: number;\r\n  lifestyle: string;\r\n  patient: string;\r\n}\r\n\r\nexport interface Visit {\r\n  key: string;\r\n  value: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-single-patient',\r\n  templateUrl: './single-patient.component.html',\r\n  styleUrls: ['./single-patient.component.scss']\r\n})\r\nexport class SinglePatientComponent implements OnInit {\r\n  patient: Patient[] = [];\r\n  advic: any[] = [];\r\n  advices: any[] = [];\r\n  encounters: any[] = [];\r\n  symp: any[] = [];\r\n  symptoms: any[] = [];\r\n  examination: any[] = [];\r\n  encount: any[] = [];\r\n  medicines: any[] = [];\r\n  id: number;\r\n  encounterId: any;\r\n\r\n  visit: Visit[] = [\r\n    { key: 'ODP', value: 'ODP'},\r\n  ];\r\n  displayedColumns: string[] = ['position'];\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private adviceService: AdviceService,\r\n    private encounterService: EncounterService,\r\n    private medicineService: MedicineService,\r\n    private examinationService: ExaminationService,\r\n    private symptomService: SymptomService,\r\n    private toastr: ToastrService,\r\n    private route: ActivatedRoute) {\r\n      route.queryParamMap.subscribe(\r\n        params => {\r\n          this.encounterId = params.get('encounter');\r\n          if (this.encounterId) {\r\n            this.encounterService.get(this.encounterId)\r\n            .subscribe(\r\n              (data: any[]) => {\r\n                this.encount =  data;\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n      this.id = +this.route.snapshot.paramMap.get('id');\r\n      this.patientService.get(this.id)\r\n      .subscribe(\r\n        (data: Patient[]) => {\r\n          this.patient = data;\r\n        }\r\n      );\r\n    }\r\n\r\n  ngOnInit() {\r\n    this.adviceService.getAll()\r\n    .subscribe(\r\n      (data: any[]) => {\r\n        this.advices = data.filter(p => p.patient === this.id);\r\n      }\r\n    );\r\n    this.symptomService.getAll()\r\n    .subscribe(\r\n      (data: any[]) => {\r\n        this.symptoms = data.filter(p => p.patient === this.id);\r\n      }\r\n    );\r\n    this.examinationService.getAll()\r\n    .subscribe(\r\n      (data: any[]) => {\r\n        const filtered = data.find(p => p.patient === this.id);\r\n        if (filtered) {\r\n          this.examination = filtered;\r\n        }\r\n      }\r\n    );\r\n    this.encounterService.getAll()\r\n    .subscribe(\r\n      (data: any[]) => {\r\n        this.encounters = data.filter(p => p.patient === this.id);\r\n      }\r\n    );\r\n    this.medicineService.getAll()\r\n    .subscribe(\r\n      (data: any[]) => {\r\n        this.medicines = data;\r\n      }\r\n    );\r\n  }\r\n\r\n  encounter(data) {\r\n    const formData: FormData = new FormData();\r\n    formData.append('date', data.date);\r\n    formData.append('visit_type', data.visit_type);\r\n    formData.append('patient', this.id.toString());\r\n    this.encounterService.create(formData)\r\n    .subscribe(\r\n      response => {\r\n        this.encounters.splice(this.encounters.length, 0 , response);\r\n        this.toastr.success('Successfully Added', 'Success');\r\n      }\r\n    );\r\n  }\r\n\r\n  medicine(data) {\r\n    const formData: FormData = new FormData();\r\n\r\n    formData.append('medicines', data.medicine);\r\n    formData.append('patient', this.id.toString());\r\n    formData.append('id', this.encounterId);\r\n\r\n    this.encounterService.update(this.encounterId, data)\r\n    .subscribe(\r\n      (response: any) => {\r\n        this.toastr.success('Successfully Added', 'Success');\r\n      }\r\n    );\r\n  }\r\n\r\n  report(value)  {\r\n    const formData: FormData = new FormData();\r\n    formData.append('pulse', value.pulse);\r\n    formData.append('bp', value.bp);\r\n    formData.append('temp', value.temp);\r\n    formData.append('resp_rate', value.resp_rate);\r\n    formData.append('height', value.height);\r\n    formData.append('lifestyle', value.lifestyle);\r\n    formData.append('patient', this.id.toString());\r\n    if (value.id) {\r\n      formData.append('id', value.id);\r\n      this.examinationService.update(value.id, formData)\r\n      .subscribe(\r\n        (response: any) => {\r\n          this.examination = response;\r\n          this.toastr.success('Successfully Updated', 'Success');\r\n        }\r\n      );\r\n    } else {\r\n      this.examinationService.create(formData)\r\n      .subscribe(\r\n        (response: any) => {\r\n          this.examination = response;\r\n          this.toastr.success('Successfully Added', 'Success');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  symptom(data) {\r\n    const index = this.symptoms.indexOf(data);\r\n    const formData: FormData = new FormData();\r\n    formData.append('symptom', data.symptom);\r\n    formData.append('patient', this.id.toString());\r\n    if (data.id) {\r\n      formData.append('id', data.id);\r\n      this.symptomService.update(data.id, formData)\r\n      .subscribe(\r\n        (response: any) => {\r\n          this.symptoms.splice(index, 1, response);\r\n          this.toastr.success('Successfully Updated', 'Success');\r\n        }\r\n      );\r\n    } else {\r\n\r\n      this.symptomService.create(formData)\r\n      .subscribe(\r\n        (response: any) => {\r\n          this.symptoms.splice(this.symptoms.length, 0 , response);\r\n          this.toastr.success('Successfully Added', 'Success');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  sigleSymptom(item) {\r\n    this.symptomService.get(item.id)\r\n    .subscribe(\r\n      (data: any[]) => {\r\n        this.symp = data;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteSymptom(item) {\r\n    const index = this.symptoms.indexOf(item);\r\n    this.symptomService.delete(item.id)\r\n    .subscribe(\r\n      data => {\r\n        this.symptoms.splice(index, 1);\r\n        this.toastr.success('Successfully Deleted', 'Success');\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  advice(data) {\r\n    const index = this.advices.indexOf(data);\r\n    const formData: FormData = new FormData();\r\n    formData.append('advice', data.advice);\r\n    formData.append('patient', this.id.toString());\r\n    if (data.id) {\r\n      formData.append('id', data.id);\r\n      this.adviceService.update(data.id, formData)\r\n      .subscribe(\r\n        (response: any) => {\r\n          this.advices.splice(index, 1, response);\r\n          this.toastr.success('Successfully Updated', 'Success');\r\n        }\r\n      );\r\n    } else {\r\n      this.adviceService.create(formData)\r\n      .subscribe(\r\n        response => {\r\n          this.advices.splice(this.advices.length, 0 , response);\r\n          this.toastr.success('Successfully Added', 'Success');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  singleAdvice(item) {\r\n    this.adviceService.get(item.id)\r\n    .subscribe(\r\n      (data: any[]) => {\r\n        this.advic = data;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteAdvice(item) {\r\n    const index = this.advices.indexOf(item);\r\n    this.adviceService.delete(item.id)\r\n    .subscribe(\r\n      data => {\r\n        this.advices.splice(index, 1);\r\n        this.toastr.success('Successfully Deleted', 'Success');\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  API_URL: 'http://rxpy.pythonanywhere.com',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nimport 'hammerjs';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":""}