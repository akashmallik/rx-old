{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/home/home.component.html","webpack:///./src/app/medicine-dialog/medicine-dialog.component.html","webpack:///./src/app/medicine/medicine.component.html","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/patient/patient.component.html","webpack:///./src/app/single-patient/single-patient.component.html","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/home/home.component.scss","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/medicine-dialog/medicine-dialog.component.scss","webpack:///./src/app/medicine-dialog/medicine-dialog.component.ts","webpack:///./src/app/medicine/medicine.component.scss","webpack:///./src/app/medicine/medicine.component.ts","webpack:///./src/app/navbar/navbar.component.scss","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/patient/patient.component.scss","webpack:///./src/app/patient/patient.component.ts","webpack:///./src/app/services/advice.service.ts","webpack:///./src/app/services/encounter.service.ts","webpack:///./src/app/services/examination.service.ts","webpack:///./src/app/services/medicine.service.ts","webpack:///./src/app/services/patient.service.ts","webpack:///./src/app/services/symptom.service.ts","webpack:///./src/app/single-patient/single-patient.component.scss","webpack:///./src/app/single-patient/single-patient.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<app-navbar></app-navbar>\\n\\n\\n<router-outlet></router-outlet>\\n\\n<footer>\\n    <div class=\\\"text-center copyright d-print-none\\\">Designed & Developed By: <strong>Team R<sub>x</sub></strong></div>\\n</footer>\\n\"","module.exports = \"<div class=\\\"container\\\">\\n    <a mat-raised-button color=\\\"primary\\\" routerLink=\\\"/patients\\\">Add Patient</a>\\n\\n    <mat-form-field>\\n        <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n    </mat-form-field>\\n    <div class=\\\"mat-elevation-z8\\\">\\n        <table mat-table matSort [dataSource]=\\\"dataSource\\\">\\n    \\n            <!-- Name Column -->\\n            <ng-container matColumnDef=\\\"name\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Name. </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n            </ng-container>\\n    \\n            <!-- Age Column -->\\n            <ng-container matColumnDef=\\\"age\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Age </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.age}} </td>\\n            </ng-container>\\n    \\n            <!-- Phone Column -->\\n            <ng-container matColumnDef=\\\"phone\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Phone </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.phone}} </td>\\n            </ng-container>\\n    \\n            <!-- Address Column -->\\n            <ng-container matColumnDef=\\\"address\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.address}} </td>\\n            </ng-container>\\n    \\n            <!-- Action Column -->\\n            <ng-container matColumnDef=\\\"action\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Action </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                    <a mat-raised-button color=\\\"primary\\\" class=\\\"mr-2\\\" routerLink=\\\"patients/{{element.id}}\\\">\\n                        <i class=\\\"material-icons\\\">visibility</i>\\n                    </a>\\n                    <a mat-raised-button color=\\\"accent\\\" class=\\\"mr-2\\\" routerLink=\\\"patients/edit/{{element.id}}\\\">\\n                        <i class=\\\"material-icons\\\">edit</i>\\n                    </a>\\n                    <button mat-raised-button color=\\\"warn\\\" (click)=\\\"delete(element)\\\">\\n                        <i class=\\\"material-icons\\\">delete</i>\\n                    </button>\\n                </td>\\n            </ng-container>\\n    \\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n        </table>\\n        <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\n    </div>\\n</div>\\n\"","module.exports = \"<h2 mat-dialog-title>{{ data.length !== undefined ? 'Add' : 'Update'}} Medicine</h2>\\n<mat-dialog-content>\\n    <form #medicineForm=\\\"ngForm\\\" class=\\\"mat-form\\\">\\n        <mat-form-field class=\\\"mat-form-field\\\">\\n            <input matInput [(ngModel)]=\\\"data.medicine\\\" #medicine=\\\"ngModel\\\" name=\\\"medicine\\\" placeholder=\\\"Medicine\\\" required>\\n            <mat-error *ngIf=\\\"medicine.touched && medicine.invalid\\\">The <strong>medicine</strong> field is required.</mat-error>\\n        </mat-form-field>\\n        <mat-form-field class=\\\"mat-form-field\\\" hidden=\\\"true\\\">\\n            <input matInput [(ngModel)]=\\\"data.id\\\" name=\\\"id\\\" placeholder=\\\"id\\\">\\n        </mat-form-field>\\n    </form>\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <button mat-raised-button color=\\\"warn\\\" mat--dialogclose (click)=\\\"cancel()\\\">Cancel</button>\\n  <button mat-raised-button color=\\\"primary\\\" [mat-dialog-close]=\\\"true\\\" [disabled]=\\\"medicineForm.invalid\\\" (click)=\\\"save(medicineForm.value)\\\">{{ data.length === 0 ? 'Add' : 'Update'}}</button>\\n</mat-dialog-actions>\"","module.exports = \"<div class=\\\"container\\\">\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"openDialog()\\\">Add Medicine</button>\\n    <mat-form-field>\\n        <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n    </mat-form-field>\\n    <div class=\\\"mat-elevation-z8\\\">\\n        <table mat-table matSort [dataSource]=\\\"dataSource\\\">\\n    \\n            <!-- Name Column -->\\n            <ng-container matColumnDef=\\\"medicine\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Medicine </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{ element.medicine }} </td>\\n            </ng-container>\\n    \\n            <!-- Action Column -->\\n            <ng-container matColumnDef=\\\"action\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Action </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                    <button mat-raised-button color=\\\"accent\\\" class=\\\"mr-2\\\" (click)=\\\"openDialog(element)\\\">\\n                        <i class=\\\"material-icons\\\">edit</i>\\n                    </button>\\n                    <button mat-raised-button color=\\\"warn\\\" (click)=\\\"delete(element)\\\">\\n                        <i class=\\\"material-icons\\\">delete</i>\\n                    </button>\\n                </td>\\n            </ng-container>\\n    \\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n        </table>\\n        <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\n    </div>\\n</div>\\n\"","module.exports = \"<header id=\\\"navbar\\\" class=\\\"d-print-none\\\">\\n    <div class=\\\"container\\\">\\n        <nav>\\n            <a routerLink=\\\"/\\\" class=\\\"logo\\\">R<sub>x <span class=\\\"xm\\\">alpha-1.0</span></sub></a>\\n            <a mat-raised-button routerLink=\\\"/\\\" class=\\\"mr-2\\\">Home</a>\\n            <!-- <a mat-raised-button routerLink=\\\"patients\\\" class=\\\"mr-2\\\">Patients</a> -->\\n            <a mat-raised-button routerLink=\\\"medicine\\\" class=\\\"mr-2\\\">Medicine</a>\\n            \\n            <!-- <button mat-raised-button [matMenuTriggerFor]=\\\"belowMenu\\\">Dropdown</button>\\n            <mat-menu #belowMenu=\\\"matMenu\\\" yPosition=\\\"below\\\">\\n              <button mat-menu-item>Item 1</button>\\n              <button mat-menu-item>Item 2</button>\\n            </mat-menu> -->\\n        </nav>\\n    </div>\\n</header>\\n\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-8\\\">\\n            <form #patientForm=\\\"ngForm\\\" (ngSubmit)=\\\"save(patientForm.value)\\\" class=\\\"mat-form\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-8\\\">\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\n                            <input matInput [(ngModel)]=\\\"patient.name\\\" #name=\\\"ngModel\\\" name=\\\"name\\\" placeholder=\\\"Patient Name\\\" required>\\n                            <mat-error *ngIf=\\\"name.touched && name.invalid\\\">The <strong>name</strong> field is required.</mat-error>\\n                        </mat-form-field>\\n                    </div>\\n                    <div class=\\\"col-md-4\\\">\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\n                            <input matInput type=\\\"number\\\" [(ngModel)]=\\\"patient.age\\\" #age=\\\"ngModel\\\" name=\\\"age\\\" placeholder=\\\"Age\\\" required>\\n                            <mat-error *ngIf=\\\"age.touched && age.invalid\\\">The <strong>age</strong> field is required.</mat-error>\\n                        </mat-form-field>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-4\\\">\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\n                            <mat-label>Sex</mat-label>\\n                            <mat-select [(ngModel)]=\\\"patient.sex\\\" name=\\\"sex\\\">\\n                                <!-- <mat-option *ngFor=\\\"let s of sex | keyvalue\\\" [value]=\\\"s.key\\\"> -->\\n                                <mat-option *ngFor=\\\"let s of sex\\\" [value]=\\\"s.key\\\">\\n                                {{ s.value }}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div class=\\\"col-md-4\\\">\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\n                            <mat-label>Blood Group</mat-label>\\n                            <mat-select [(ngModel)]=\\\"patient.blood_group\\\" name=\\\"blood_group\\\">\\n                                <mat-option *ngFor=\\\"let b of blood\\\" [value]=\\\"b.key\\\">\\n                                {{ b.value }}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div class=\\\"col-md-4\\\">\\n                        <div class=\\\"mat-form-field\\\">\\n                            <input type=\\\"file\\\" ngModel name=\\\"avatar\\\" (change)=\\\"onFileSelected($event)\\\" placeholder=\\\"Avatar\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-6\\\">\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\n                            <input matInput [(ngModel)]=\\\"patient.phone\\\" #phone=\\\"ngModel\\\" phone=\\\"CN\\\" name=\\\"phone\\\" placeholder=\\\"Phone\\\" required>\\n                            <mat-error *ngIf=\\\"phone.touched && phone.invalid\\\">The <strong>phone</strong> field is required.</mat-error>\\n                            <mat-error *ngIf=\\\"phone.errors?.phone\\\">error message</mat-error>\\n\\n                        </mat-form-field>\\n                    </div>\\n                    <div class=\\\"col-md-6\\\">\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\n                            <input matInput [(ngModel)]=\\\"patient.email\\\" #email=\\\"ngModel\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" email>\\n                            <mat-error *ngIf=\\\"email.errors?.email\\\">Please enter a valid email.</mat-error>\\n                        </mat-form-field>\\n                    </div>\\n                </div>\\n                <mat-form-field class=\\\"mat-form-field\\\">\\n                    <textarea matInput [(ngModel)]=\\\"patient.address\\\" name=\\\"address\\\" placeholder=\\\"Address\\\"></textarea>\\n                </mat-form-field>\\n\\n                <button mat-raised-button [disabled]=\\\"patientForm.invalid\\\" color=\\\"primary\\\">Submit</button>\\n            </form>\\n    \\n        </div>\\n        <div class=\\\"col-md-4\\\">\\n            <mat-card class=\\\"example-card\\\" *ngIf=\\\"patient.length === undefined\\\">\\n                <mat-card-header>\\n                    <div mat-card-avatar [ngStyle]=\\\"{ 'background-image': 'url(' + patient.avatar + ')', 'background-size': 'cover'}\\\"></div>\\n                    <mat-card-title>{{ patient.name }}</mat-card-title>\\n                    <mat-card-subtitle><strong>Sex:</strong> {{ patient.sex }} <strong>Age:</strong> {{ patient.age }}</mat-card-subtitle>\\n                </mat-card-header>\\n                <img mat-card-image [src]=\\\"patient.avatar\\\" alt=\\\"{{ patient.name }}\\\">\\n                <mat-card-content>\\n                    <strong>Blood Group:</strong> {{ patient.blood_group }} <br>\\n                    <strong>Phone:</strong> {{ patient.phone }} <br>\\n                    <strong>Email:</strong> {{ patient.email }} <br>\\n                    <strong>Address:</strong> {{ patient.address }}\\n                </mat-card-content>\\n            </mat-card>\\n    \\n        </div>\\n    </div>\\n</div>\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-3 d-print-none\\\">\\r\\n            <mat-card class=\\\"example-card\\\">\\r\\n                <mat-card-header>\\r\\n                    <div mat-card-avatar [ngStyle]=\\\"{ 'background-image': 'url(' + patient.avatar + ')', 'background-size': 'cover'}\\\"></div>\\r\\n                    <mat-card-title>{{ patient.name }}</mat-card-title>\\r\\n                    <mat-card-subtitle><strong>Sex:</strong> {{ patient.sex }} <strong>Age:</strong> {{ patient.age }}</mat-card-subtitle>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <strong>Blood Group:</strong> {{ patient.blood_group }} <br>\\r\\n                    <strong>Phone:</strong> {{ patient.phone }} <br>\\r\\n                    <strong>Email:</strong> {{ patient.email }} <br>\\r\\n                    <strong>Address:</strong> {{ patient.address }}\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            <mat-card class=\\\"mt-3\\\">\\r\\n                Encounters\\r\\n                <mat-card-content>\\r\\n                    <mat-list>\\r\\n                        <a mat-button *ngFor=\\\"let e of encounters; index as i\\\"\\r\\n                        routerLink=\\\"/patients/{{id}}/\\\"\\r\\n                        [queryParams]=\\\"{ encounter: e.id }\\\"\\r\\n                        [class.active]=\\\"encounterId == e.id\\\">\\r\\n                            <strong>Encounter-{{ i+1 }}</strong> [{{ e.date }}]\\r\\n                        </a>\\r\\n                    </mat-list>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            <div class=\\\"mat-elevation-z8\\\">\\r\\n            </div>\\r\\n\\r\\n            <form #encounterForm=\\\"ngForm\\\" (ngSubmit)=\\\"encounter(encounterForm.value)\\\" class=\\\"mat-form\\\">\\r\\n                <mat-form-field class=\\\"mat-form-field\\\" hidden=\\\"true\\\">\\r\\n                    <input matInput [matDatepicker]=\\\"picker\\\" ngModel name=\\\"date\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                    <mat-label>Visit Type</mat-label>\\r\\n                    <mat-select ngModel name=\\\"visit_type\\\">\\r\\n                        <mat-option *ngFor=\\\"let v of visit\\\" [value]=\\\"v.key\\\">\\r\\n                        {{ v.value }}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <button mat-raised-button color=\\\"primary\\\">Submit</button>\\r\\n            </form>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-9\\\">\\r\\n            <mat-tab-group>\\r\\n                <mat-tab label=\\\"C/C\\\">\\r\\n                    <mat-list>\\r\\n                        <mat-list-item *ngFor=\\\"let s of symptoms\\\">\\r\\n                            <h4 matLine>{{ s.symptom }}</h4> \\r\\n                            <button mat-icon-button color=\\\"primary\\\" (click)=\\\"sigleSymptom(s)\\\">\\r\\n                                <i class=\\\"material-icons\\\">edit</i>\\r\\n                            </button>\\r\\n                            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteSymptom(s)\\\">\\r\\n                                <i class=\\\"material-icons\\\">delete</i>\\r\\n                            </button>\\r\\n                        </mat-list-item>\\r\\n                    </mat-list>\\r\\n                    <form #symptomForm=\\\"ngForm\\\" (ngSubmit)=\\\"symptom(symptomForm.value); symptomForm.reset()\\\" class=\\\"mat-form\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\" hidden>\\r\\n                            <textarea matInput [(ngModel)]=\\\"symp.id\\\" name=\\\"id\\\" placeholder=\\\"Id\\\"></textarea>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\" hidden>\\r\\n                            <textarea matInput [(ngModel)]=\\\"symp.patient\\\" name=\\\"patient\\\" placeholder=\\\"Patient\\\"></textarea>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <textarea matInput [(ngModel)]=\\\"symp.symptom\\\" #sym=\\\"ngModel\\\" name=\\\"symptom\\\" placeholder=\\\"Symptom\\\" required></textarea>\\r\\n                            <mat-error *ngIf=\\\"sym.touched && sym.invalid\\\">The <strong>symptom</strong> field is required.</mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <button mat-raised-button type=\\\"button\\\" color=\\\"warn\\\" (click)=\\\"symptomForm.reset(); symp = []\\\" class=\\\"mr-2\\\">Reset</button>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"symptomForm.invalid\\\">{{ symp.length !== undefined ? 'Add' : 'Update' }}</button>\\r\\n                    </form>\\r\\n                    \\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"Examination\\\">\\r\\n                    <form #reportForm=\\\"ngForm\\\" (ngSubmit)=\\\"report(reportForm.value); reportForm.reset()\\\" class=\\\"mat-form\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\" hidden>\\r\\n                            <input matInput [(ngModel)]=\\\"examination.id\\\" name=\\\"id\\\" placeholder=\\\"id\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.pulse\\\" name=\\\"pulse\\\" placeholder=\\\"Pulse\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.bp\\\" name=\\\"bp\\\" placeholder=\\\"BP\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.temp\\\" name=\\\"temp\\\" placeholder=\\\"Temp\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.resp_rate\\\" name=\\\"resp_rate\\\" placeholder=\\\"Resp rate\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.height\\\" name=\\\"height\\\" placeholder=\\\"Height\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <input matInput [(ngModel)]=\\\"examination.lifestyle\\\" name=\\\"lifestyle\\\" placeholder=\\\"Lifestyle\\\">\\r\\n                        </mat-form-field>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"reportForm.invalid\\\">{{ examination.id ? 'Update' : 'Add' }}</button>\\r\\n                    </form>\\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"Medicine\\\">\\r\\n                    <div *ngIf=\\\"encount.length === undefined\\\">\\r\\n                        <div *ngFor=\\\"let n of encount.medicines\\\">\\r\\n                            <div *ngFor=\\\"let m of medicines\\\">\\r\\n                                <div *ngIf=\\\"n === m.id\\\" class=\\\"mb-3\\\">{{ m.medicine }}</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <form #medicineForm=\\\"ngForm\\\" (ngSubmit)=\\\"medicine(medicineForm.value)\\\" class=\\\"mat-form\\\">\\r\\n                            <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                                <mat-label>Medicine</mat-label>\\r\\n                                <mat-select [(ngModel)]=\\\"encount.medicines\\\" name=\\\"medicines\\\" multiple>\\r\\n                                  <mat-option *ngFor=\\\"let m of medicines\\\" [value]=\\\"m.id\\\" selected>{{m.medicine}}</mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                            <button mat-raised-button color=\\\"primary\\\">Add</button>\\r\\n                        </form>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"encount.length !== undefined\\\">\\r\\n                        Please select encounter first! \\r\\n                    </div>\\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"Advice\\\">\\r\\n                    <mat-list>\\r\\n                        <mat-list-item *ngFor=\\\"let a of advices\\\">\\r\\n                            <h4 matLine>{{ a.advice }}</h4>\\r\\n                            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"singleAdvice(a)\\\">\\r\\n                                <i class=\\\"material-icons\\\">edit</i>\\r\\n                            </button> \\r\\n                            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteAdvice(a)\\\">\\r\\n                                <i class=\\\"material-icons\\\">delete</i>\\r\\n                            </button>\\r\\n                        </mat-list-item>\\r\\n                    </mat-list>\\r\\n                    <form #adviceForm=\\\"ngForm\\\" (ngSubmit)=\\\"advice(adviceForm.value); adviceForm.reset()\\\" class=\\\"mat-form\\\">\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\" hidden>\\r\\n                            <textarea matInput [(ngModel)]=\\\"advic.id\\\" name=\\\"id\\\" placeholder=\\\"Id\\\"></textarea>\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-form-field\\\">\\r\\n                            <textarea matInput [(ngModel)]=\\\"advic.advice\\\" #adv=\\\"ngModel\\\" name=\\\"advice\\\" placeholder=\\\"Advice\\\" required></textarea>\\r\\n                            <mat-error *ngIf=\\\"adv.touched && adv.invalid\\\">The <strong>advice</strong> field is required.</mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <button mat-raised-button type=\\\"button\\\" color=\\\"warn\\\" (click)=\\\"adviceForm.reset(); advic = []\\\" class=\\\"mr-2\\\">Reset</button>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"adviceForm.invalid\\\">{{ advic.length !== undefined ? 'Add' : 'Update' }}</button>\\r\\n                    </form>\\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"Prescription\\\">\\r\\n                    <mat-card class=\\\"example-card\\\" #print>\\r\\n                        <mat-card-content>\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col-8\\\">\\r\\n                                    <strong class=\\\"text-capitalize\\\">DR: SHOFIQUL ISLAM</strong> <br>\\r\\n                                    <strong>MBBS</strong> <br>\\r\\n                                    Stength: General Surgery <br>\\r\\n                                    Reg. No.- 55065\\r\\n                                </div>\\r\\n                                <div class=\\\"col-4\\\">\\r\\n                                    <strong>ABC DIAGNOSTIC CENTRE</strong> <br>\\r\\n                                    <strong>Phone:</strong> 02-58610000-8 <br>\\r\\n                                    <strong>Email:</strong>\\tinfo@abcgroup.com <br>\\r\\n                                    <strong>Website:</strong> www.abcgroup.com\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <hr>\\r\\n                            <div class=\\\"\\\">\\r\\n                                <h3 class=\\\"text-center\\\">Patient: <strong>{{ patient.name }}</strong></h3>\\r\\n                                <div class=\\\"row align-items-middle\\\">\\r\\n                                    <div class=\\\"col-9\\\">\\r\\n                                        <strong>Sex:</strong> {{ patient.sex }} <strong>Age:</strong> {{ patient.age }} <strong>Blood Group:</strong> {{ patient.blood_group }} <br>\\r\\n                                        <strong>Phone:</strong> {{ patient.phone }} <strong>Email:</strong> {{ patient.email }} <br> <strong>Address:</strong> {{ patient.address }}\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-3\\\">\\r\\n                                        <strong>Encounter Id: </strong> <qrcode qrdata=\\\"1\\\" [size]=\\\"30\\\" [level]=\\\"'L'\\\"></qrcode><br>\\r\\n                                        <strong>Date: </strong> {{ encount.date }}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <hr>\\r\\n                            <hr>\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col-4\\\">\\r\\n                                    <h4>Symptoms</h4> <hr>\\r\\n                                    <ul>\\r\\n                                        <li *ngFor=\\\"let s of symptoms\\\">\\r\\n                                            {{ s.symptom }}\\r\\n                                        </li>\\r\\n                                    </ul>\\r\\n                                    <h4>General Info</h4> <hr>\\r\\n                                    <ul>\\r\\n                                        <li>Pulse: {{ examination.pulse }}</li>\\r\\n                                        <li>B.P.: {{ examination.bp }}</li>\\r\\n                                        <li>Temp: {{ examination.temp }}</li>\\r\\n                                        <li>Resp rate: {{ examination.resp_rate }}</li>\\r\\n                                        <li>Height: {{ examination.height }}</li>\\r\\n                                        <li>Lifestyle: {{ examination.lifestyle }}</li>\\r\\n                                    </ul>\\r\\n                                    <h4>Advices</h4> <hr>\\r\\n                                    <ul>\\r\\n                                        <li *ngFor=\\\"let a of advices\\\">\\r\\n                                            {{ a.advice }}\\r\\n                                        </li>\\r\\n                                    </ul>\\r\\n\\r\\n                                </div>\\r\\n                                <div class=\\\"col-8\\\">\\r\\n                                    <h4>Medicines</h4> <hr>\\r\\n                                    <ul *ngFor=\\\"let n of encount.medicines\\\">\\r\\n                                        <div *ngFor=\\\"let m of medicines\\\">\\r\\n                                            <li *ngIf=\\\"n === m.id\\\">{{ m.medicine }}</li>\\r\\n                                        </div>\\r\\n                                    </ul>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </mat-card-content>\\r\\n                        <mat-card-footer>\\r\\n                            <div class=\\\"text-center copyright\\\">Designed & Developed By: <strong>Team R<sub>x</sub></strong></div>\\r\\n                        </mat-card-footer>\\r\\n                    </mat-card>\\r\\n                    \\r\\n                    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"printPage()\\\" class=\\\"mt-3 float-right  d-print-none\\\">Print</button>\\r\\n                </mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { PatientComponent } from './patient/patient.component';\nimport { SinglePatientComponent } from './single-patient/single-patient.component';\nimport { MedicineComponent } from './medicine/medicine.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'patients/edit/:id', component: PatientComponent },\n  { path: 'patients/:id', component: SinglePatientComponent },\n  { path: 'patients', component: PatientComponent },\n  { path: 'medicine', component: MedicineComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'rx';\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatDialogModule, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\r\nimport { QRCodeModule } from 'angularx-qrcode';\r\n\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { PatientComponent } from './patient/patient.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { SinglePatientComponent } from './single-patient/single-patient.component';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MedicineComponent } from './medicine/medicine.component';\r\nimport { MedicineDialogComponent } from './medicine-dialog/medicine-dialog.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PatientComponent,\r\n    HomeComponent,\r\n    NavbarComponent,\r\n    SinglePatientComponent,\r\n    MedicineComponent,\r\n    MedicineDialogComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatMenuModule,\r\n    MatAutocompleteModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    HttpClientModule,\r\n    ToastrModule.forRoot(),\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatTabsModule,\r\n    MatCardModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatDialogModule,\r\n    QRCodeModule\r\n  ],\r\n  providers: [\r\n    // { provide: MatDialogRef, useValue: {} },\r\n    // { provide: MAT_DIALOG_DATA, useValue: [] },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [MedicineDialogComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWUvaG9tZS5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {MatTableDataSource} from '@angular/material/table';\nimport { PatientService } from '../services/patient.service';\nimport { ToastrService } from 'ngx-toastr';\n\nexport interface Patient {\n  id: number;\n  name: string;\n  phone: number;\n  email: string;\n  address: string;\n  sex: string;\n  age: number;\n  blood_group: string;\n  avatar: string;\n}\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  displayedColumns: string[] = ['name', 'age', 'phone', 'address', 'action'];\n  dataSource: MatTableDataSource<Patient>;\n\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n  constructor(\n    private patientService: PatientService,\n    private toastr: ToastrService) {}\n\n  ngOnInit() {\n    this.patientService.getAll()\n    .subscribe(\n      (response: Patient[]) => {\n        this.dataSource = new MatTableDataSource<Patient>(response);\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n        this.dataSource._updateChangeSubscription();\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  delete(item) {\n    const index = this.dataSource.data.indexOf(item);\n    this.patientService.delete(item.id)\n    .subscribe(\n      data => {\n        this.dataSource.data.splice(index, 1);\n        this.dataSource._updateChangeSubscription();\n        this.toastr.success('Successfully Deleted', 'Success');\n      }\n    );\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lZGljaW5lLWRpYWxvZy9tZWRpY2luZS1kaWFsb2cuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n  selector: 'app-medicine-dialog',\n  templateUrl: './medicine-dialog.component.html',\n  styleUrls: ['./medicine-dialog.component.scss']\n})\nexport class MedicineDialogComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<MedicineDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data) { }\n\n  ngOnInit() {\n  }\n\n  cancel(): void {\n    this.dialogRef.close();\n  }\n\n  save(value) {\n    this.dialogRef.close(value);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lZGljaW5lL21lZGljaW5lLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MedicineService } from '../services/medicine.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { MatDialog, MatDialogConfig, MatTableDataSource, MatSort, MatPaginator } from '@angular/material';\nimport { MedicineDialogComponent } from '../medicine-dialog/medicine-dialog.component';\n\nexport interface Medicine {\n  id: number;\n  medicine: string;\n}\n\n@Component({\n  selector: 'app-medicine',\n  templateUrl: './medicine.component.html',\n  styleUrls: ['./medicine.component.scss']\n})\n\nexport class MedicineComponent implements OnInit {\n  private errors: any[] = [];\n\n  displayedColumns: string[] = ['medicine', 'action'];\n  dataSource: MatTableDataSource<Medicine>;\n\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n  constructor(\n    private medicineService: MedicineService,\n    public dialog: MatDialog,\n    private toastr: ToastrService) { }\n\n  ngOnInit() {\n    this.medicineService.getAll()\n    .subscribe(\n      (data: Medicine[]) => {\n        this.dataSource = new MatTableDataSource<Medicine>(data);\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n      },\n      error => {\n        this.errorHandler(error);\n      }\n    );\n  }\n\n  public errorHandler(response) {\n    console.log(response);\n    if (Array.isArray(response.error)) {\n      this.errors = response.error;\n      for (const error in this.errors) {\n        if (this.errors.hasOwnProperty(error)) {\n          this.toastr.warning(error.toUpperCase() + ': ' + this.errors[error], 'Warning');\n        }\n      }\n    } else {\n      if (response.status === 404) {\n        this.toastr.warning('Not Found!', '404');\n      } else {\n        this.toastr.error(response.message, 'Error');\n      }\n    }\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  openDialog(elementdata?: any) {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    if (elementdata) {\n      dialogConfig.data = elementdata;\n    } else {\n      dialogConfig.data = [];\n    }\n\n    const dialogRef = this.dialog.open(MedicineDialogComponent, dialogConfig);\n\n    dialogRef.afterClosed().subscribe(\n      data => {\n        if (data) {\n          if (data.id) {\n            this.medicineService.update(data.id, data)\n            .subscribe(\n              response => {\n                this.dataSource._updateChangeSubscription();\n                this.toastr.success('Successfully Updated', 'Success');\n              },\n              error => {\n                this.errorHandler(error);\n              }\n            );\n          } else {\n            this.medicineService.create(data)\n            .subscribe(\n              (response: Medicine) => {\n                this.dataSource.data.splice(this.dataSource.data.length, 0, response);\n                this.dataSource._updateChangeSubscription();\n                this.toastr.success('Successfully Added', 'Success');\n              },\n              error => {\n                this.errorHandler(error);\n              }\n            );\n          }\n        }\n      }\n    );\n  }\n\n  delete(item) {\n    const index = this.dataSource.data.indexOf(item);\n    this.medicineService.delete(item.id)\n    .subscribe(\n      data => {\n        this.dataSource.data.splice(index, 1);\n        this.dataSource._updateChangeSubscription();\n        this.toastr.success('Successfully Deleted', 'Success');\n      },\n      error => {\n        console.log(error);\n        this.errorHandler(error);\n      }\n    );\n  }\n\n}\n","module.exports = \"#navbar {\\n  background: #3f51b5;\\n  padding: 1rem 0;\\n  margin-bottom: 3rem;\\n}\\n#navbar nav {\\n  display: flex !important;\\n}\\n.logo {\\n  color: #ffffff;\\n  text-decoration: none;\\n  font-size: 2rem;\\n  font-weight: bold;\\n  font-family: \\\"Iceland\\\", cursive;\\n  margin-right: auto;\\n}\\n.xm {\\n  font-size: 0.8rem;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbmF2YmFyL0U6XFxyeFxccngvc3JjXFxhcHBcXG5hdmJhclxcbmF2YmFyLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9uYXZiYXIvbmF2YmFyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksbUJBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7QUNDSjtBREFJO0VBQ0ksd0JBQUE7QUNFUjtBRENBO0VBQ0ksY0FBQTtFQUNBLHFCQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0VBQ0EsK0JBQUE7RUFDQSxrQkFBQTtBQ0VKO0FEQ0E7RUFDSSxpQkFBQTtBQ0VKIiwiZmlsZSI6InNyYy9hcHAvbmF2YmFyL25hdmJhci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNuYXZiYXIge1xyXG4gICAgYmFja2dyb3VuZDogIzNmNTFiNTtcclxuICAgIHBhZGRpbmc6IDFyZW0gMDtcclxuICAgIG1hcmdpbi1ib3R0b206IDNyZW07XHJcbiAgICBuYXYge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcclxuICAgIH1cclxufVxyXG4ubG9nbyB7XHJcbiAgICBjb2xvcjogI2ZmZmZmZjtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1mYW1pbHk6ICdJY2VsYW5kJywgY3Vyc2l2ZTtcclxuICAgIG1hcmdpbi1yaWdodDogYXV0bztcclxufVxyXG5cclxuLnhtIHtcclxuICAgIGZvbnQtc2l6ZTogLjhyZW07XHJcbn0iLCIjbmF2YmFyIHtcbiAgYmFja2dyb3VuZDogIzNmNTFiNTtcbiAgcGFkZGluZzogMXJlbSAwO1xuICBtYXJnaW4tYm90dG9tOiAzcmVtO1xufVxuI25hdmJhciBuYXYge1xuICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XG59XG5cbi5sb2dvIHtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgZm9udC1zaXplOiAycmVtO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1mYW1pbHk6IFwiSWNlbGFuZFwiLCBjdXJzaXZlO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG59XG5cbi54bSB7XG4gIGZvbnQtc2l6ZTogMC44cmVtO1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhdGllbnQvcGF0aWVudC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nexport interface Patient {\r\n  id: number;\r\n  name: string;\r\n  phone: number;\r\n  email: string;\r\n  address: string;\r\n  sex: string;\r\n  age: number;\r\n  blood_group: string;\r\n  avatar: string;\r\n}\r\nexport interface Sex {\r\n  key: string;\r\n  value: string;\r\n}\r\nexport interface Blood {\r\n  key: string;\r\n  value: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-patient',\r\n  templateUrl: './patient.component.html',\r\n  styleUrls: ['./patient.component.scss']\r\n})\r\nexport class PatientComponent implements OnInit {\r\n  private selectedFile = null;\r\n  patient = [];\r\n  id: any;\r\n\r\n  sex: Sex[] = [\r\n    { key: 'Male', value: 'Male'},\r\n    { key: 'Female', value: 'Female'},\r\n    { key: 'Others', value: 'Others'},\r\n  ];\r\n  blood: Blood[] = [\r\n    { key: 'A+', value: 'A+'},\r\n    { key: 'A-', value: 'A-'},\r\n    { key: 'B+', value: 'B+'},\r\n    { key: 'B-', value: 'B-'},\r\n    { key: 'AB+', value: 'AB+'},\r\n    { key: 'AB-', value: 'AB-'},\r\n    { key: 'O+', value: 'O+'},\r\n    { key: 'O-', value: 'O-'},\r\n  ];\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private router: Router,\r\n    private toastr: ToastrService,\r\n    private route: ActivatedRoute ) {\r\n      this.id = +this.route.snapshot.paramMap.get('id');\r\n      if (this.id) {\r\n        this.patientService.get(this.id)\r\n        .subscribe(\r\n          (data: Patient[]) => {\r\n            this.patient = data;\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onFileSelected(event) {\r\n    this.selectedFile = event.target.files[0];\r\n  }\r\n\r\n  save(value) {\r\n    const formData: FormData = new FormData();\r\n    formData.append('name', value.name);\r\n    formData.append('age', value.age);\r\n    formData.append('sex', value.sex);\r\n    formData.append('blood_group', value.blood_group);\r\n    formData.append('phone', value.phone);\r\n    formData.append('email', value.email);\r\n    formData.append('address', value.address);\r\n    if (this.selectedFile) {\r\n      formData.append('avatar', this.selectedFile, this.selectedFile.name);\r\n    }\r\n\r\n    if (this.id) {\r\n      this.patientService.update(this.id, formData)\r\n      .subscribe(\r\n        response => {\r\n          this.toastr.success('Successfully Updated', 'Success');\r\n        },\r\n        error => {\r\n          console.log(error.error);\r\n        }\r\n      );\r\n    } else {\r\n      this.patientService.create(formData)\r\n      .subscribe(\r\n        response => {\r\n          this.toastr.success('Successfully Added', 'Success');\r\n        },\r\n        error => {\r\n          console.log(error.error);\r\n        }\r\n      );\r\n    }\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdviceService {\r\n  private configUrl = environment.API_URL + '/advice/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EncounterService {\r\n  private configUrl = environment.API_URL + '/encounter/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.patch(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationService {\r\n  private configUrl = environment.API_URL + '/examination/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicineService {\r\n\r\n  private configUrl = environment.API_URL + '/medicine/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientService {\r\n  private configUrl = environment.API_URL + '/patients/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SymptomService {\r\n  private configUrl = environment.API_URL + '/symptom/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll() {\r\n    return this.http.get(this.configUrl);\r\n  }\r\n  get(id) {\r\n    return this.http.get(this.configUrl + id + '/');\r\n  }\r\n  create(resource) {\r\n    return this.http.post(this.configUrl, resource);\r\n  }\r\n  update(id, resource) {\r\n    return this.http.put(this.configUrl + id + '/', resource);\r\n  }\r\n  delete(id) {\r\n    return this.http.delete(this.configUrl + id + '/');\r\n  }\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NpbmdsZS1wYXRpZW50L3NpbmdsZS1wYXRpZW50LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { AdviceService } from '../services/advice.service';\nimport { EncounterService } from '../services/encounter.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { MedicineService } from '../services/medicine.service';\nimport { ExaminationService } from '../services/examination.service';\nimport { SymptomService } from '../services/symptom.service';\n\nexport interface Patient {\n  id: number;\n  name: string;\n  phone: number;\n  email: string;\n  address: string;\n  sex: string;\n  age: number;\n  blood_group: string;\n  avatar: string;\n}\nexport interface Patient {\n  id: number;\n  name: string;\n  phone: number;\n  email: string;\n  address: string;\n  sex: string;\n  age: number;\n  blood_group: string;\n  avatar: string;\n}\nexport interface Examination {\n  id: string;\n  pulse: number;\n  bp: string;\n  temp: number;\n  resp_rate: number;\n  height: number;\n  lifestyle: string;\n  patient: string;\n}\n\nexport interface Visit {\n  key: string;\n  value: string;\n}\n\n@Component({\n  selector: 'app-single-patient',\n  templateUrl: './single-patient.component.html',\n  styleUrls: ['./single-patient.component.scss']\n})\nexport class SinglePatientComponent implements OnInit {\n  @ViewChild('print', { read: ElementRef, static: false }) print: ElementRef;\n  patient: Patient[] = [];\n  advic: any[] = [];\n  advices: any[] = [];\n  encounters: any[] = [];\n  symp: any[] = [];\n  symptoms: any[] = [];\n  examination: any[] = [];\n  encount: any[] = [];\n  medicines: any[] = [];\n  id: number;\n  encounterId: any;\n\n  visit: Visit[] = [\n    { key: 'ODP', value: 'ODP'},\n  ];\n  displayedColumns: string[] = ['position'];\n  constructor(\n    private patientService: PatientService,\n    private adviceService: AdviceService,\n    private encounterService: EncounterService,\n    private medicineService: MedicineService,\n    private examinationService: ExaminationService,\n    private symptomService: SymptomService,\n    private toastr: ToastrService,\n    private route: ActivatedRoute) {\n      route.queryParamMap.subscribe(\n        params => {\n          this.encounterId = params.get('encounter');\n          if (this.encounterId) {\n            this.encounterService.get(this.encounterId)\n            .subscribe(\n              (data: any[]) => {\n                this.encount =  data;\n              }\n            );\n          }\n        }\n      );\n      this.id = +this.route.snapshot.paramMap.get('id');\n      this.patientService.get(this.id)\n      .subscribe(\n        (data: Patient[]) => {\n          this.patient = data;\n        }\n      );\n    }\n\n  ngOnInit() {\n    this.adviceService.getAll()\n    .subscribe(\n      (data: any[]) => {\n        this.advices = data.filter(p => p.patient === this.id);\n      }\n    );\n    this.symptomService.getAll()\n    .subscribe(\n      (data: any[]) => {\n        this.symptoms = data.filter(p => p.patient === this.id);\n      }\n    );\n    this.examinationService.getAll()\n    .subscribe(\n      (data: any[]) => {\n        const filtered = data.find(p => p.patient === this.id);\n        if (filtered) {\n          this.examination = filtered;\n        }\n      }\n    );\n    this.encounterService.getAll()\n    .subscribe(\n      (data: any[]) => {\n        this.encounters = data.filter(p => p.patient === this.id);\n      }\n    );\n    this.medicineService.getAll()\n    .subscribe(\n      (data: any[]) => {\n        this.medicines = data;\n      }\n    );\n  }\n\n  encounter(data) {\n    const formData: FormData = new FormData();\n    formData.append('date', data.date);\n    formData.append('visit_type', data.visit_type);\n    formData.append('patient', this.id.toString());\n    this.encounterService.create(formData)\n    .subscribe(\n      response => {\n        this.encounters.splice(this.encounters.length, 0 , response);\n        this.toastr.success('Successfully Added', 'Success');\n      }\n    );\n  }\n\n  medicine(data) {\n    const formData: FormData = new FormData();\n\n    formData.append('medicines', data.medicine);\n    formData.append('patient', this.id.toString());\n    formData.append('id', this.encounterId);\n\n    this.encounterService.update(this.encounterId, data)\n    .subscribe(\n      (response: any) => {\n        this.toastr.success('Successfully Added', 'Success');\n      }\n    );\n  }\n\n  report(value)  {\n    const formData: FormData = new FormData();\n    formData.append('pulse', value.pulse);\n    formData.append('bp', value.bp);\n    formData.append('temp', value.temp);\n    formData.append('resp_rate', value.resp_rate);\n    formData.append('height', value.height);\n    formData.append('lifestyle', value.lifestyle);\n    formData.append('patient', this.id.toString());\n    if (value.id) {\n      formData.append('id', value.id);\n      this.examinationService.update(value.id, formData)\n      .subscribe(\n        (response: any) => {\n          this.examination = response;\n          this.toastr.success('Successfully Updated', 'Success');\n        }\n      );\n    } else {\n      this.examinationService.create(formData)\n      .subscribe(\n        (response: any) => {\n          this.examination = response;\n          this.toastr.success('Successfully Added', 'Success');\n        }\n      );\n    }\n  }\n\n  symptom(data) {\n    const formData: FormData = new FormData();\n    formData.append('symptom', data.symptom);\n    formData.append('patient', this.id.toString());\n    if (data.id) {\n      const index = this.symptoms.map(x => x.id).indexOf(data.id);\n      formData.append('id', data.id);\n      this.symptomService.update(data.id, formData)\n      .subscribe(\n        (response: any) => {\n          this.symptoms.splice(index, 1, response);\n          this.toastr.success('Successfully Updated', 'Success');\n        }\n      );\n    } else {\n      this.symptomService.create(formData)\n      .subscribe(\n        (response: any) => {\n          this.symptoms.splice(this.symptoms.length, 0 , response);\n          this.toastr.success('Successfully Added', 'Success');\n        }\n      );\n    }\n  }\n\n  sigleSymptom(item) {\n    this.symptomService.get(item.id)\n    .subscribe(\n      (data: any[]) => {\n        this.symp = data;\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  deleteSymptom(item) {\n    const index = this.symptoms.indexOf(item);\n    this.symptomService.delete(item.id)\n    .subscribe(\n      data => {\n        this.symptoms.splice(index, 1);\n        this.toastr.success('Successfully Deleted', 'Success');\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  advice(data) {\n    const formData: FormData = new FormData();\n    formData.append('advice', data.advice);\n    formData.append('patient', this.id.toString());\n    if (data.id) {\n      const index = this.advices.map(x => x.id).indexOf(data.id);\n      formData.append('id', data.id);\n      this.adviceService.update(data.id, formData)\n      .subscribe(\n        (response: any) => {\n          this.advices.splice(index, 1, response);\n          this.toastr.success('Successfully Updated', 'Success');\n        }\n      );\n    } else {\n      this.adviceService.create(formData)\n      .subscribe(\n        response => {\n          this.advices.splice(this.advices.length, 0 , response);\n          this.toastr.success('Successfully Added', 'Success');\n        }\n      );\n    }\n  }\n\n  singleAdvice(item) {\n    this.adviceService.get(item.id)\n    .subscribe(\n      (data: any[]) => {\n        this.advic = data;\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  deleteAdvice(item) {\n    const index = this.advices.indexOf(item);\n    this.adviceService.delete(item.id)\n    .subscribe(\n      data => {\n        this.advices.splice(index, 1);\n        this.toastr.success('Successfully Deleted', 'Success');\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  printPage() {\n    window.print();\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  API_URL: 'https://rxpy.pythonanywhere.com',\r\n  // API_URL: 'http://127.0.0.1:8000',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}